
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 01 16:35:42 CET 2024
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 01 16:35:42 CET 2024
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\003\004\000\002\003\003" +
    "\000\002\004\006\000\002\004\006\000\002\005\004\000" +
    "\002\005\002\000\002\006\005\000\002\006\005\000\002" +
    "\007\003\000\002\007\005\000\002\007\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\004\000\002\011\003\000\002\012\006\000" +
    "\002\012\003\000\002\012\003\000\002\012\006\000\002" +
    "\013\017\000\002\013\017\000\002\013\016\000\002\013" +
    "\015\000\002\013\014\000\002\013\013\000\002\013\012" +
    "\000\002\013\011\000\002\013\010\000\002\013\007\000" +
    "\002\013\006\000\002\013\005\000\002\013\004\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\005\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\006\003\005\004\006\001\002\000\004\002" +
    "\131\001\002\000\004\002\ufffc\001\002\000\006\003\007" +
    "\026\010\001\002\000\004\002\ufffd\001\002\000\006\003" +
    "\012\027\011\001\002\000\006\003\014\032\013\001\002" +
    "\000\004\002\ufffe\001\002\000\020\005\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\032\ufff8\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002\000\020\005" +
    "\024\007\020\010\032\011\031\012\022\013\027\032\013" +
    "\001\002\000\004\013\123\001\002\000\004\013\ufff2\001" +
    "\002\000\016\003\uffeb\005\uffeb\006\uffeb\013\uffeb\032\uffeb" +
    "\033\uffeb\001\002\000\004\013\uffef\001\002\000\006\003" +
    "\121\033\122\001\002\000\006\003\071\026\072\001\002" +
    "\000\020\005\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\032\ufff9\001\002\000\014\003\uffed\005\024\013\027" +
    "\032\013\033\uffed\001\002\000\004\025\033\001\002\000" +
    "\016\003\uffea\005\uffea\006\uffea\013\uffea\032\uffea\033\uffea" +
    "\001\002\000\004\013\ufff0\001\002\000\004\013\ufff1\001" +
    "\002\000\010\013\035\014\036\026\042\001\002\000\014" +
    "\003\uffd8\015\uffd8\016\uffd8\027\uffd8\030\uffd8\001\002\000" +
    "\030\003\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\027\uffc9\030\uffc9\001\002\000" +
    "\030\003\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\027\uffc8\030\uffc8\001\002\000" +
    "\030\003\uffd1\015\uffd1\016\uffd1\017\055\020\057\021\054" +
    "\022\061\023\056\024\060\027\uffd1\030\uffd1\001\002\000" +
    "\010\003\053\015\046\030\052\001\002\000\014\003\uffda" +
    "\015\uffda\016\050\027\uffda\030\uffda\001\002\000\010\013" +
    "\035\014\036\026\042\001\002\000\010\003\045\015\046" +
    "\027\044\001\002\000\030\003\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\027\uffc7" +
    "\030\uffc7\001\002\000\030\003\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\027\uffc6" +
    "\030\uffc6\001\002\000\010\013\035\014\036\026\042\001" +
    "\002\000\014\003\uffdb\015\uffdb\016\050\027\uffdb\030\uffdb" +
    "\001\002\000\010\013\035\014\036\026\042\001\002\000" +
    "\014\003\uffd9\015\uffd9\016\uffd9\027\uffd9\030\uffd9\001\002" +
    "\000\016\003\uffec\005\uffec\006\uffec\013\uffec\032\uffec\033" +
    "\uffec\001\002\000\016\003\uffe9\005\uffe9\006\uffe9\013\uffe9" +
    "\032\uffe9\033\uffe9\001\002\000\010\013\035\014\036\026" +
    "\042\001\002\000\010\013\035\014\036\026\042\001\002" +
    "\000\010\013\035\014\036\026\042\001\002\000\010\013" +
    "\035\014\036\026\042\001\002\000\010\013\035\014\036" +
    "\026\042\001\002\000\010\013\035\014\036\026\042\001" +
    "\002\000\014\003\uffd4\015\uffd4\016\uffd4\027\uffd4\030\uffd4" +
    "\001\002\000\014\003\uffd2\015\uffd2\016\uffd2\027\uffd2\030" +
    "\uffd2\001\002\000\014\003\uffd6\015\uffd6\016\uffd6\027\uffd6" +
    "\030\uffd6\001\002\000\014\003\uffd3\015\uffd3\016\uffd3\027" +
    "\uffd3\030\uffd3\001\002\000\014\003\uffd7\015\uffd7\016\uffd7" +
    "\027\uffd7\030\uffd7\001\002\000\014\003\uffd5\015\uffd5\016" +
    "\uffd5\027\uffd5\030\uffd5\001\002\000\006\003\uffee\033\uffee" +
    "\001\002\000\016\003\uffdc\005\uffdc\006\uffdc\013\uffdc\032" +
    "\uffdc\033\uffdc\001\002\000\012\003\073\013\035\014\036" +
    "\026\042\001\002\000\016\003\uffdd\005\uffdd\006\uffdd\013" +
    "\uffdd\032\uffdd\033\uffdd\001\002\000\010\003\076\015\046" +
    "\027\075\001\002\000\006\003\100\032\077\001\002\000" +
    "\016\003\uffde\005\uffde\006\uffde\013\uffde\032\uffde\033\uffde" +
    "\001\002\000\012\003\101\005\024\013\027\032\013\001" +
    "\002\000\016\003\uffdf\005\uffdf\006\uffdf\013\uffdf\032\uffdf" +
    "\033\uffdf\001\002\000\016\003\uffe0\005\uffe0\006\uffe0\013" +
    "\uffe0\032\uffe0\033\uffe0\001\002\000\006\003\103\006\104" +
    "\001\002\000\016\003\uffe1\005\uffe1\006\uffe1\013\uffe1\032" +
    "\uffe1\033\uffe1\001\002\000\006\003\105\026\106\001\002" +
    "\000\016\003\uffe2\005\uffe2\006\uffe2\013\uffe2\032\uffe2\033" +
    "\uffe2\001\002\000\012\003\107\013\035\014\036\026\042" +
    "\001\002\000\016\003\uffe3\005\uffe3\006\uffe3\013\uffe3\032" +
    "\uffe3\033\uffe3\001\002\000\010\003\112\015\046\027\111" +
    "\001\002\000\006\003\114\030\113\001\002\000\016\003" +
    "\uffe4\005\uffe4\006\uffe4\013\uffe4\032\uffe4\033\uffe4\001\002" +
    "\000\012\003\115\005\024\013\027\032\013\001\002\000" +
    "\016\003\uffe5\005\uffe5\006\uffe5\013\uffe5\032\uffe5\033\uffe5" +
    "\001\002\000\016\003\uffe6\005\uffe6\006\uffe6\013\uffe6\032" +
    "\uffe6\033\uffe6\001\002\000\006\003\117\033\120\001\002" +
    "\000\016\003\uffe7\005\uffe7\006\uffe7\013\uffe7\032\uffe7\033" +
    "\uffe7\001\002\000\016\003\uffe8\005\uffe8\006\uffe8\013\uffe8" +
    "\032\uffe8\033\uffe8\001\002\000\020\002\ufffa\003\ufffa\005" +
    "\ufffa\006\ufffa\013\ufffa\032\ufffa\033\ufffa\001\002\000\020" +
    "\002\ufffb\003\ufffb\005\ufffb\006\ufffb\013\ufffb\032\ufffb\033" +
    "\ufffb\001\002\000\010\003\ufff5\030\ufff5\031\ufff5\001\002" +
    "\000\010\003\127\030\126\031\125\001\002\000\004\013" +
    "\130\001\002\000\020\005\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\032\ufff7\001\002\000\026\003\ufff3\005" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\030\ufff3" +
    "\031\ufff3\032\ufff6\001\002\000\010\003\ufff4\030\ufff4\031" +
    "\ufff4\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\014\001\001\000\002\001\001\000" +
    "\004\005\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\020\006\024\010\016\011\022\012\025\013" +
    "\027\001\001\000\004\007\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\020\011\067" +
    "\012\025\013\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\014\037" +
    "\015\040\016\033\020\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\042\015\040\016" +
    "\033\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\046\016\033\020\036\001" +
    "\001\000\002\001\001\000\006\016\050\020\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\066\001\001\000\004\020\065\001\001\000\004" +
    "\020\064\001\001\000\004\020\063\001\001\000\004\020" +
    "\062\001\001\000\004\020\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\073\015\040\016\033\020\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\020\012\101\013\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\107\015\040\016\033\020\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\020\012\115\013\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public int errNo = 0;

   public static void main(String[] args) {
      try {
         FileReader file = new FileReader(args[0]);
         Scanner scanner = new MPLexer(file);
         MPParser parser = new MPParser(scanner);
         parser.parse();
         if (parser.errNo == 0)
            System.out.println("Analiza je zavrsena. U kodu nema gresaka.");
         else
            System.out.println("Analiza je zavrsena. Broj gresaka: " + parser.errNo);
      } catch (Exception e) {
         e.printStackTrace();
      }
   }

   public void syntax_error(Symbol cur_token) { }

   public void report_error(String message, Object info) {
      System.out.print(message);
   }

   public int getLine() {
      return ((MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Term ::= LEFTPAR Expression error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ')'.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Term ::= LEFTPAR Expression RIGHTPAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Term ::= CONST 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Term ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RelOp ::= error 
            {
              Object RESULT = null;
		
                  System.out.println("Greska u liniji " + parser.getLine() + ": Neispravan relacioni operator.");
                  parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelOp ::= GE 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelOp ::= GT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RelOp ::= NE 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RelOp ::= EQ 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RelOp ::= LE 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RelOp ::= LT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RelExpression ::= Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RelExpression ::= Term GE Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelExpression ::= Term GT Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelExpression ::= Term NE Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelExpression ::= Term EQ Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelExpression ::= Term LE Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelExpression ::= Term LT Term 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AndExpression ::= RelExpression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AndExpression ::= AndExpression AND RelExpression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= AndExpression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression OR AndExpression 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RedoLoop ::= LOOP error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje validna petlja.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RedoLoop ::= LOOP LEFTPAR error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje Expression");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RedoLoop ::= LOOP LEFTPAR Expression error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ')'");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje '{'.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje Statement. 1");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje REDO.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje '('.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO LEFTPAR error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje Expression.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO LEFTPAR Expression error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ')'.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO LEFTPAR Expression RIGHTPAR error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ';'.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO LEFTPAR Expression RIGHTPAR SEMICOLON error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje Statement. 2");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO LEFTPAR Expression RIGHTPAR SEMICOLON Statement error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje '}'.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RedoLoop ::= LOOP LEFTPAR Expression RIGHTPAR LBRACE Statement REDO LEFTPAR Expression RIGHTPAR SEMICOLON Statement RBRACE 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*RedoLoop*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= ID ASSIGN Expression error 
            {
              Object RESULT = null;
		
               System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ';'.");
               parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= RedoLoop 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ID ASSIGN Expression SEMICOLON 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= Statement 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement StatementList 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= BOOL 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= FLOAT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= CHAR 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INT 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NameList ::= NameList error 
            {
              Object RESULT = null;
		
            System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ','.");
            parser.errNo++;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NameList ::= NameList COMMA ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= ID 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDecl ::= Type NameList error 
            {
              Object RESULT = null;
		
              System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ';'.");
              parser.errNo++;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDecl ::= Type NameList SEMICOLON 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declarations ::= 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declarations ::= Declarations VarDecl 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Declarations*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= LBRACE Declarations StatementList error 
            {
              Object RESULT = null;
		
             System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje '}'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= LBRACE Declarations StatementList RBRACE 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Program ::= error 
            {
              Object RESULT = null;
		 
             System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje main");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MAIN error 
            {
              Object RESULT = null;
		 
             System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje '(' ili telo funkcije.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN LEFTPAR error 
            {
              Object RESULT = null;
		 
             System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje ')'.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LEFTPAR RIGHTPAR error 
            {
              Object RESULT = null;
		 
             System.out.println("Greska u liniji " + parser.getLine() + ": Nedostaje BLOCK.");
             parser.errNo++;
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

